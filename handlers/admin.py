from aiogram import types
from misc import dp, bot
import sqlite3
from .sqlit import info_members, delite_user,get_data_tag, sbros_all_tag,get_channel_info


import asyncio
from datetime import timedelta, datetime

from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup

from aiogram.utils.exceptions import BotBlocked, ChatNotFound

ADMIN_ID_1 = 6250893291
ADMIN_ID = [ADMIN_ID_1]

class st_reg(StatesGroup):
    st_name = State()
    st_fname = State()
    step_q = State()
    step_regbutton = State()



@dp.message_handler(commands=['admin'])
async def admin_ka(message: types.Message):
    id = message.from_user.id
    if id in ADMIN_ID:
        markup = types.InlineKeyboardMarkup()
        bat_a = types.InlineKeyboardButton(text='–¢—Ä–∞—Ñ–∏–∫', callback_data='list_members')
        bat_e = types.InlineKeyboardButton(text='–†–∞—Å—Å—ã–ª–∫–∞', callback_data='write_message')
        bat_j = types.InlineKeyboardButton(text='–ë–∞–∑–∞ db', callback_data='baza')
        bat_j_1 = types.InlineKeyboardButton(text='–ë–∞–∑—É txt', callback_data='baza1')
        bat_ref = types.InlineKeyboardButton(text='–†–µ—Ñ–µ—Ä–∞–ª–∫–∞', callback_data='ref_ka')

        markup.add(bat_ref)
        markup.add(bat_j,bat_j_1)
        markup.add(bat_a, bat_e)

        data = get_channel_info()

        await bot.send_message(message.chat.id, '–í—ã–ø–æ–ª–Ω–µ–Ω –≤—Ö–æ–¥ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å', reply_markup=markup)


@dp.callback_query_handler(text='ref_ka')
async def ref_ka(call: types.callback_query):
    markup = types.InlineKeyboardMarkup()
    bat_key = types.InlineKeyboardButton(text='–°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ —Ç—ç–≥–∏', callback_data='sbros')
    markup.add(bat_key)

    data = get_data_tag()

    answ = ""
    for d in data:
        d3 = d[1] + d[2] #–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ –º–µ—Ç–∫–µ
        a = f"""<b>–ú–µ—Ç–∫–∞: {d[0]}
        
–ù–∞–∂–∞–ª–∏ /start: {d[1] + d[2] + d[3] +d[4]} 
–ü—Ä–∞–≤ –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ 1 —É—Ä–æ–∫: {d[2] + d[3] +d[4]} 
–ü—Ä–∞–≤ –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ 2 —É—Ä–æ–∫: {d[3] +d[4]} 
–ü—Ä–∞–≤ –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ 3 —É—Ä–æ–∫: {d[4]} 

–ù–∞–ø–∏—Å–∞–ª–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {d[7]}
–ö—É–ø–∏–ª–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {d[8]}</b> 



"""
        answ+= a

    await bot.send_message(chat_id=call.message.chat.id, text = answ,reply_markup=markup)


    await bot.answer_callback_query(call.id)

@dp.callback_query_handler(text='sbros')
async def sbros(call: types.callback_query):
    try:
        sbros_all_tag()
        await call.message.answer("–£—Å–ø–µ—à–Ω–æ")
    except:
        await call.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–∞—Å—ã–≤–∞–Ω–∏–∏ —Ç—ç–≥–æ–≤")
    await bot.answer_callback_query(call.id)







@dp.callback_query_handler(text='baza')
async def baza(call: types.callback_query):
    if call.message.chat.id in ADMIN_ID:
        a = open('server.db', 'rb')
        await bot.send_document(chat_id=call.message.chat.id, document=a)
    await bot.answer_callback_query(call.id)


@dp.callback_query_handler(text='baza1')
async def baza1(call: types.callback_query):
    if call.message.chat.id in ADMIN_ID:
        db = sqlite3.connect('server.db')
        sql = db.cursor()
        a = sql.execute(f"SELECT * FROM user_time").fetchall()
        f = open('id.txt', 'w')
        for id in a:
            f.write(f'{id[0]}, ')
        f.close()
        a = open('id.txt', 'rb')
        await bot.send_document(chat_id=call.message.chat.id, document=a)
        f.close()
    await bot.answer_callback_query(call.id)


@dp.callback_query_handler(text='list_members')  # –ê–î–ú–ò–ù –ö–ù–û–ü–ö–ê –¢–†–ê–§–ò–ö–ê
async def check(call: types.callback_query):
    if call.message.chat.id in ADMIN_ID:
        a = info_members()  # –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ —Ñ–∞–π–ª–∞ sqlit
        await bot.send_message(call.message.chat.id, f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {a}')
    await bot.answer_callback_query(call.id)


########################  –†–∞—Å—Å—ã–ª–∫–∞  ################################
@dp.callback_query_handler(text='write_message')  # –ê–î–ú–ò–ù –ö–ù–û–ü–ö–ê –†–∞—Å—Å—ã–ª–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
async def check(call: types.callback_query, state: FSMContext):
    murkap = types.InlineKeyboardMarkup()
    bat0 = types.InlineKeyboardButton(text='–î–∞', callback_data='rasl_yes')
    bat1 = types.InlineKeyboardButton(text='–Ω–µ—Ç', callback_data='rasl_no')
    murkap.add(bat0, bat1)

    await bot.send_message(call.message.chat.id, '–ë—É–¥–µ–º —á–∏—Å—Ç–∏—Ç—å –±–∞–∑—É –æ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö? (–º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –±–æ–ª—å—à–µ –≤—Ä–µ–º—è)', reply_markup = murkap)
    await bot.answer_callback_query(call.id)



@dp.callback_query_handler(text_startswith='rasl_')  # –ê–î–ú–ò–ù –ö–ù–û–ü–ö–ê –†–∞—Å—Å—ã–ª–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
async def check(call: types.callback_query, state: FSMContext):
    if call.data == 'rasl_yes':
        await state.update_data(rasl = 'yes')
    else:
        await state.update_data(rasl = 'no')

    murkap = types.InlineKeyboardMarkup()
    bat0 = types.InlineKeyboardButton(text='–û–¢–ú–ï–ù–ê', callback_data='otemena')
    murkap.add(bat0)
    await bot.send_message(call.message.chat.id, '–ü–µ—Ä–µ—à–ª–∏ –º–Ω–µ —É–∂–µ –≥–æ—Ç–æ–≤—ã–π –ø–æ—Å—Ç –∏ —è —Ä–∞–∑–æ—à–ª—é –µ–≥–æ –≤—Å–µ–º —é–∑–µ—Ä–∞–º',
                           reply_markup=murkap)
    await st_reg.step_q.set()
    await bot.answer_callback_query(call.id)


@dp.callback_query_handler(text='otemena', state='*')
async def otmena_12(call: types.callback_query, state: FSMContext):
    await bot.send_message(call.message.chat.id, '–û—Ç–º–µ–Ω–µ–Ω–æ')
    await state.finish()
    await bot.answer_callback_query(call.id)


@dp.message_handler(state=st_reg.step_q,
                    content_types=['text', 'photo', 'video', 'video_note', 'voice'])  # –ü—Ä–µ–¥–æ—Å–º–æ—Ç—Ä –ø–æ—Å—Ç–∞
async def redarkt_post(message: types.Message, state: FSMContext):
    await st_reg.st_name.set()
    murkap = types.InlineKeyboardMarkup()
    bat0 = types.InlineKeyboardButton(text='–û–¢–ú–ï–ù–ê', callback_data='otemena')
    bat1 = types.InlineKeyboardButton(text='–†–ê–ó–û–°–õ–ê–¢–¨', callback_data='send_ras')
    bat2 = types.InlineKeyboardButton(text='–î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫–∏', callback_data='add_but')
    murkap.add(bat1)
    murkap.add(bat2)
    murkap.add(bat0)

    await message.copy_to(chat_id=message.chat.id)
    q = message
    await state.update_data(q=q)

    await bot.send_message(chat_id=message.chat.id, text='–ü–æ—Å—Ç —Å–µ–π—á–∞—Å –≤—ã–≥–ª—è–¥–∏—Ç —Ç–∞–∫ üëÜ', reply_markup=murkap)


# –ù–ê–°–¢–†–û–ô–ö–ê –ö–ù–û–ü–û–ö
@dp.callback_query_handler(text='add_but', state=st_reg.st_name)  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
async def addbutton(call: types.callback_query, state: FSMContext):
    await bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
    await bot.send_message(call.message.chat.id, text='–û—Ç–ø—Ä–∞–≤–ª—è–π –º–Ω–µ –∫–Ω–æ–ø–∫–∏ –ø–æ –ø—Ä–∏–Ω—Ü–∏–ø—É Controller Bot')
    await st_reg.step_regbutton.set()
    await bot.answer_callback_query(call.id)


@dp.message_handler(state=st_reg.step_regbutton, content_types=['text'])  # –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–æ–∫ –≤ –Ω–µ—Ñ–æ—Ä–º–∞—Ç–µ
async def redarkt_button(message: types.Message, state: FSMContext):
    arr3 = message.text.split('\n')
    murkap = types.InlineKeyboardMarkup()  # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏

    massiv_text = []
    massiv_url = []

    for but in arr3:
        new_but = but.split('-')
        massiv_text.append(new_but[0][:-1])
        massiv_url.append(new_but[1][1:])
        bat9 = types.InlineKeyboardButton(text=new_but[0][:-1], url=new_but[1][1:])
        murkap.add(bat9)

    try:
        data = await state.get_data()
        mess = data['q']  # ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏

        await bot.copy_message(chat_id=message.chat.id, from_chat_id=message.chat.id, message_id=mess.message_id,
                               reply_markup=murkap)

        await state.update_data(text_but=massiv_text)  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –°–µ—Ç–∞
        await state.update_data(url_but=massiv_url)  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –°–µ—Ç–∞

        murkap2 = types.InlineKeyboardMarkup()  # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ - –º–µ–Ω—é
        bat0 = types.InlineKeyboardButton(text='–û–¢–ú–ï–ù–ê', callback_data='otemena')
        bat1 = types.InlineKeyboardButton(text='–†–ê–ó–û–°–õ–ê–¢–¨', callback_data='send_ras')
        murkap2.add(bat1)
        murkap2.add(bat0)

        await bot.send_message(chat_id=message.chat.id, text='–¢–µ–ø–µ—Ä—å —Ç–≤–æ–π –ø–æ—Å—Ç –≤—ã–≥–ª—è–¥–∏—Ç —Ç–∞–∫‚òù', reply_markup=murkap2)


    except:
        await bot.send_message(chat_id=message.chat.id, text='–û—à–∏–±–∫–∞. –û—Ç–º–µ–Ω–µ–Ω–æ')
        await state.finish()


# –ö–û–ù–ï–¶ –ù–ê–°–¢–†–û–ô–ö–ò –ö–ù–û–ü–û–ö


@dp.callback_query_handler(text='send_ras', state="*")  # –†–∞—Å—Å—ã–ª–∫–∞
async def fname_step(call: types.callback_query, state: FSMContext):
    await bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
    data = await state.get_data()
    mess = data['q']  # –°–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
    rasl = data['rasl']  # –°–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏

    murkap = types.InlineKeyboardMarkup()  # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    try:  # –ü—ã—Ç–∞–µ–º—Å—è –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫–∏. –ï—Å–ª–∏ –∏—Ö –Ω–µ—Ç—É –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–ª–∞–≤—É –ø—É—Å—Ç–æ–π
        text_massiv = data['text_but']
        url_massiv = data['url_but']
        for t in text_massiv:
            for u in url_massiv:
                bat = types.InlineKeyboardButton(text=t, url=u)
                murkap.add(bat)
                break

    except:
        pass

    db = sqlite3.connect('server.db')
    sql = db.cursor()
    await state.finish()
    users = sql.execute("SELECT id FROM user_time").fetchall()
    bad = 0
    good = 0
    delit = 0
    await bot.send_message(call.message.chat.id,
                           f"<b>–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <code>{len(users)}</code></b>\n\n<b>–†–∞—Å—Å–ª—ã–∫–∞ –Ω–∞—á–∞—Ç–∞!</b>",
                           parse_mode="html")

    if rasl == 'yes':
        for i in users:
            await asyncio.sleep(0.03)
            try:
                await mess.copy_to(i[0], reply_markup=murkap)
                good += 1
            except (BotBlocked, ChatNotFound):
                try:
                    delite_user(i[0])
                    delit += 1

                except:
                    pass
            except:
                bad += 1
    else:
        for i in users:
            await asyncio.sleep(0.03)
            try:
                await mess.copy_to(i[0], reply_markup=murkap)
                good += 1
            except:
                bad += 1

    await bot.send_message(
        call.message.chat.id,
        "<u>–†–∞—Å—Å—ã–ª–∫–∞ –æ–∫–æ–Ω—á–µ–Ω–∞\n\n</u>"
        f"<b>–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> <code>{len(users)}</code>\n"
        f"<b>–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:</b> <code>{good}</code>\n"
        f"<b>–£–¥–∞–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> <code>{delit}</code>\n"
        f"<b>–ü—Ä–æ–∏–∑–æ—à–ª–æ –æ—à–∏–±–æ–∫:</b> <code>{bad}</code>",
        parse_mode="html"
    )
    await bot.answer_callback_query(call.id)
#########################################################
